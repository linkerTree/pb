// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package credential

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCredentialValidatorClient is the client API for UserCredentialValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCredentialValidatorClient interface {
	// 获取一个public key
	GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyRsp, error)
	// 尝试登陆的时候来验证密码是否正确
	LoginByUserId(ctx context.Context, in *LoginByUserIdReq, opts ...grpc.CallOption) (*LoginByUserIdRsp, error)
	// 根据session ID检查登陆状态
	CheckIsLoggingIn(ctx context.Context, in *CheckIsLoggingInReq, opts ...grpc.CallOption) (*CheckIsLoggingInRsp, error)
	// RegisterUser 用户注册
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error)
}

type userCredentialValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCredentialValidatorClient(cc grpc.ClientConnInterface) UserCredentialValidatorClient {
	return &userCredentialValidatorClient{cc}
}

func (c *userCredentialValidatorClient) GetPublicKey(ctx context.Context, in *GetPublicKeyReq, opts ...grpc.CallOption) (*GetPublicKeyRsp, error) {
	out := new(GetPublicKeyRsp)
	err := c.cc.Invoke(ctx, "/credential.UserCredentialValidator/GetPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialValidatorClient) LoginByUserId(ctx context.Context, in *LoginByUserIdReq, opts ...grpc.CallOption) (*LoginByUserIdRsp, error) {
	out := new(LoginByUserIdRsp)
	err := c.cc.Invoke(ctx, "/credential.UserCredentialValidator/LoginByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialValidatorClient) CheckIsLoggingIn(ctx context.Context, in *CheckIsLoggingInReq, opts ...grpc.CallOption) (*CheckIsLoggingInRsp, error) {
	out := new(CheckIsLoggingInRsp)
	err := c.cc.Invoke(ctx, "/credential.UserCredentialValidator/CheckIsLoggingIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCredentialValidatorClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserRsp, error) {
	out := new(RegisterUserRsp)
	err := c.cc.Invoke(ctx, "/credential.UserCredentialValidator/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCredentialValidatorServer is the server API for UserCredentialValidator service.
// All implementations must embed UnimplementedUserCredentialValidatorServer
// for forward compatibility
type UserCredentialValidatorServer interface {
	// 获取一个public key
	GetPublicKey(context.Context, *GetPublicKeyReq) (*GetPublicKeyRsp, error)
	// 尝试登陆的时候来验证密码是否正确
	LoginByUserId(context.Context, *LoginByUserIdReq) (*LoginByUserIdRsp, error)
	// 根据session ID检查登陆状态
	CheckIsLoggingIn(context.Context, *CheckIsLoggingInReq) (*CheckIsLoggingInRsp, error)
	// RegisterUser 用户注册
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error)
	mustEmbedUnimplementedUserCredentialValidatorServer()
}

// UnimplementedUserCredentialValidatorServer must be embedded to have forward compatible implementations.
type UnimplementedUserCredentialValidatorServer struct {
}

func (UnimplementedUserCredentialValidatorServer) GetPublicKey(context.Context, *GetPublicKeyReq) (*GetPublicKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicKey not implemented")
}
func (UnimplementedUserCredentialValidatorServer) LoginByUserId(context.Context, *LoginByUserIdReq) (*LoginByUserIdRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginByUserId not implemented")
}
func (UnimplementedUserCredentialValidatorServer) CheckIsLoggingIn(context.Context, *CheckIsLoggingInReq) (*CheckIsLoggingInRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIsLoggingIn not implemented")
}
func (UnimplementedUserCredentialValidatorServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserCredentialValidatorServer) mustEmbedUnimplementedUserCredentialValidatorServer() {
}

// UnsafeUserCredentialValidatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCredentialValidatorServer will
// result in compilation errors.
type UnsafeUserCredentialValidatorServer interface {
	mustEmbedUnimplementedUserCredentialValidatorServer()
}

func RegisterUserCredentialValidatorServer(s grpc.ServiceRegistrar, srv UserCredentialValidatorServer) {
	s.RegisterService(&UserCredentialValidator_ServiceDesc, srv)
}

func _UserCredentialValidator_GetPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialValidatorServer).GetPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserCredentialValidator/GetPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialValidatorServer).GetPublicKey(ctx, req.(*GetPublicKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialValidator_LoginByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialValidatorServer).LoginByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserCredentialValidator/LoginByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialValidatorServer).LoginByUserId(ctx, req.(*LoginByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialValidator_CheckIsLoggingIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckIsLoggingInReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialValidatorServer).CheckIsLoggingIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserCredentialValidator/CheckIsLoggingIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialValidatorServer).CheckIsLoggingIn(ctx, req.(*CheckIsLoggingInReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserCredentialValidator_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCredentialValidatorServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserCredentialValidator/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCredentialValidatorServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserCredentialValidator_ServiceDesc is the grpc.ServiceDesc for UserCredentialValidator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserCredentialValidator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credential.UserCredentialValidator",
	HandlerType: (*UserCredentialValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPublicKey",
			Handler:    _UserCredentialValidator_GetPublicKey_Handler,
		},
		{
			MethodName: "LoginByUserId",
			Handler:    _UserCredentialValidator_LoginByUserId_Handler,
		},
		{
			MethodName: "CheckIsLoggingIn",
			Handler:    _UserCredentialValidator_CheckIsLoggingIn_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserCredentialValidator_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credential.proto",
}

// UserPasswordRetrieverClient is the client API for UserPasswordRetriever service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserPasswordRetrieverClient interface {
	// 需求通过email发送验证码
	GetVcodeWithEmail(ctx context.Context, in *GetVcodeWithEmailReq, opts ...grpc.CallOption) (*GetVcodeWithEmailRsp, error)
	// 检查验证码是否正确
	ValidateEmailCode(ctx context.Context, in *ValidateEmailCodeReq, opts ...grpc.CallOption) (*ValidateEmailCodeRsp, error)
	// 通过mobile发送验证码
	GetVcodeWithMobile(ctx context.Context, in *GetVcodeWithMobileReq, opts ...grpc.CallOption) (*GetVcodeWithMobileRsp, error)
	// 检查验证码是否正确
	ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeReq, opts ...grpc.CallOption) (*ValidateMobileCodeRsp, error)
	// 验证码正确的情况下，重置密码
	ResetPasswordWithToken(ctx context.Context, in *ResetPasswordWithTokenReq, opts ...grpc.CallOption) (*ResetPasswordWithTokenRsp, error)
}

type userPasswordRetrieverClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPasswordRetrieverClient(cc grpc.ClientConnInterface) UserPasswordRetrieverClient {
	return &userPasswordRetrieverClient{cc}
}

func (c *userPasswordRetrieverClient) GetVcodeWithEmail(ctx context.Context, in *GetVcodeWithEmailReq, opts ...grpc.CallOption) (*GetVcodeWithEmailRsp, error) {
	out := new(GetVcodeWithEmailRsp)
	err := c.cc.Invoke(ctx, "/credential.UserPasswordRetriever/GetVcodeWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPasswordRetrieverClient) ValidateEmailCode(ctx context.Context, in *ValidateEmailCodeReq, opts ...grpc.CallOption) (*ValidateEmailCodeRsp, error) {
	out := new(ValidateEmailCodeRsp)
	err := c.cc.Invoke(ctx, "/credential.UserPasswordRetriever/ValidateEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPasswordRetrieverClient) GetVcodeWithMobile(ctx context.Context, in *GetVcodeWithMobileReq, opts ...grpc.CallOption) (*GetVcodeWithMobileRsp, error) {
	out := new(GetVcodeWithMobileRsp)
	err := c.cc.Invoke(ctx, "/credential.UserPasswordRetriever/GetVcodeWithMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPasswordRetrieverClient) ValidateMobileCode(ctx context.Context, in *ValidateMobileCodeReq, opts ...grpc.CallOption) (*ValidateMobileCodeRsp, error) {
	out := new(ValidateMobileCodeRsp)
	err := c.cc.Invoke(ctx, "/credential.UserPasswordRetriever/ValidateMobileCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPasswordRetrieverClient) ResetPasswordWithToken(ctx context.Context, in *ResetPasswordWithTokenReq, opts ...grpc.CallOption) (*ResetPasswordWithTokenRsp, error) {
	out := new(ResetPasswordWithTokenRsp)
	err := c.cc.Invoke(ctx, "/credential.UserPasswordRetriever/ResetPasswordWithToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPasswordRetrieverServer is the server API for UserPasswordRetriever service.
// All implementations must embed UnimplementedUserPasswordRetrieverServer
// for forward compatibility
type UserPasswordRetrieverServer interface {
	// 需求通过email发送验证码
	GetVcodeWithEmail(context.Context, *GetVcodeWithEmailReq) (*GetVcodeWithEmailRsp, error)
	// 检查验证码是否正确
	ValidateEmailCode(context.Context, *ValidateEmailCodeReq) (*ValidateEmailCodeRsp, error)
	// 通过mobile发送验证码
	GetVcodeWithMobile(context.Context, *GetVcodeWithMobileReq) (*GetVcodeWithMobileRsp, error)
	// 检查验证码是否正确
	ValidateMobileCode(context.Context, *ValidateMobileCodeReq) (*ValidateMobileCodeRsp, error)
	// 验证码正确的情况下，重置密码
	ResetPasswordWithToken(context.Context, *ResetPasswordWithTokenReq) (*ResetPasswordWithTokenRsp, error)
	mustEmbedUnimplementedUserPasswordRetrieverServer()
}

// UnimplementedUserPasswordRetrieverServer must be embedded to have forward compatible implementations.
type UnimplementedUserPasswordRetrieverServer struct {
}

func (UnimplementedUserPasswordRetrieverServer) GetVcodeWithEmail(context.Context, *GetVcodeWithEmailReq) (*GetVcodeWithEmailRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVcodeWithEmail not implemented")
}
func (UnimplementedUserPasswordRetrieverServer) ValidateEmailCode(context.Context, *ValidateEmailCodeReq) (*ValidateEmailCodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEmailCode not implemented")
}
func (UnimplementedUserPasswordRetrieverServer) GetVcodeWithMobile(context.Context, *GetVcodeWithMobileReq) (*GetVcodeWithMobileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVcodeWithMobile not implemented")
}
func (UnimplementedUserPasswordRetrieverServer) ValidateMobileCode(context.Context, *ValidateMobileCodeReq) (*ValidateMobileCodeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateMobileCode not implemented")
}
func (UnimplementedUserPasswordRetrieverServer) ResetPasswordWithToken(context.Context, *ResetPasswordWithTokenReq) (*ResetPasswordWithTokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPasswordWithToken not implemented")
}
func (UnimplementedUserPasswordRetrieverServer) mustEmbedUnimplementedUserPasswordRetrieverServer() {}

// UnsafeUserPasswordRetrieverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPasswordRetrieverServer will
// result in compilation errors.
type UnsafeUserPasswordRetrieverServer interface {
	mustEmbedUnimplementedUserPasswordRetrieverServer()
}

func RegisterUserPasswordRetrieverServer(s grpc.ServiceRegistrar, srv UserPasswordRetrieverServer) {
	s.RegisterService(&UserPasswordRetriever_ServiceDesc, srv)
}

func _UserPasswordRetriever_GetVcodeWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVcodeWithEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordRetrieverServer).GetVcodeWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserPasswordRetriever/GetVcodeWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordRetrieverServer).GetVcodeWithEmail(ctx, req.(*GetVcodeWithEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPasswordRetriever_ValidateEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEmailCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordRetrieverServer).ValidateEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserPasswordRetriever/ValidateEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordRetrieverServer).ValidateEmailCode(ctx, req.(*ValidateEmailCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPasswordRetriever_GetVcodeWithMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVcodeWithMobileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordRetrieverServer).GetVcodeWithMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserPasswordRetriever/GetVcodeWithMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordRetrieverServer).GetVcodeWithMobile(ctx, req.(*GetVcodeWithMobileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPasswordRetriever_ValidateMobileCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateMobileCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordRetrieverServer).ValidateMobileCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserPasswordRetriever/ValidateMobileCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordRetrieverServer).ValidateMobileCode(ctx, req.(*ValidateMobileCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPasswordRetriever_ResetPasswordWithToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordWithTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPasswordRetrieverServer).ResetPasswordWithToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/credential.UserPasswordRetriever/ResetPasswordWithToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPasswordRetrieverServer).ResetPasswordWithToken(ctx, req.(*ResetPasswordWithTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPasswordRetriever_ServiceDesc is the grpc.ServiceDesc for UserPasswordRetriever service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPasswordRetriever_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "credential.UserPasswordRetriever",
	HandlerType: (*UserPasswordRetrieverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVcodeWithEmail",
			Handler:    _UserPasswordRetriever_GetVcodeWithEmail_Handler,
		},
		{
			MethodName: "ValidateEmailCode",
			Handler:    _UserPasswordRetriever_ValidateEmailCode_Handler,
		},
		{
			MethodName: "GetVcodeWithMobile",
			Handler:    _UserPasswordRetriever_GetVcodeWithMobile_Handler,
		},
		{
			MethodName: "ValidateMobileCode",
			Handler:    _UserPasswordRetriever_ValidateMobileCode_Handler,
		},
		{
			MethodName: "ResetPasswordWithToken",
			Handler:    _UserPasswordRetriever_ResetPasswordWithToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credential.proto",
}
